-- CSE340 Database Setup Script
-- Run this script against your PostgreSQL database to create all necessary tables

-- 1. Create the account_type enum first
DROP TYPE IF EXISTS public.account_type CASCADE;

CREATE TYPE public.account_type AS ENUM
    ('Client', 'Employee', 'Admin');

ALTER TYPE public.account_type
    OWNER TO cse340hjs;

-- 2. Create classification table
CREATE TABLE public.classification (
	classification_id INT GENERATED BY DEFAULT AS IDENTITY,
	classification_name CHARACTER VARYING NOT NULL,
	CONSTRAINT classification_pk PRIMARY KEY (classification_id)
);

-- 3. Create inventory table
CREATE TABLE IF NOT EXISTS public.inventory
(
	inv_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	inv_make character varying NOT NULL,
	inv_model character varying NOT NULL,
	inv_year character(4) NOT NULL,
	inv_description text NOT NULL,
	inv_image character varying NOT NULL,
	inv_thumbnail character varying NOT NULL,
	inv_price numeric(9, 0) NOT NULL,
	inv_miles integer NOT NULL,
	inv_color character varying NOT NULL,
	classification_id integer NOT NULL,
	CONSTRAINT inventory_pkey PRIMARY KEY (inv_id)
);

-- 4. Create relationship between classification and inventory tables
ALTER TABLE IF EXISTS public.inventory
	ADD CONSTRAINT fk_classification FOREIGN KEY (classification_id)
	REFERENCES public.classification (classification_id) MATCH SIMPLE
	ON UPDATE CASCADE
	ON DELETE NO ACTION;

-- 5. Create account table
CREATE TABLE IF NOT EXISTS public.account
(
	account_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	account_firstname character varying NOT NULL,
	account_lastname character varying NOT NULL,
	account_email character varying NOT NULL,
	account_password character varying NOT NULL,
	account_type account_type NOT NULL DEFAULT 'Client'::account_type,
	CONSTRAINT account_pkey PRIMARY KEY (account_id)
);

-- 6. Insert sample classification data
INSERT INTO public.classification (classification_name)
VALUES ('Custom'),
	('Sport'),
	('SUV'),
	('Truck'),
	('Sedan');

-- 7. Create reviews table (for the enhancement)
CREATE TABLE IF NOT EXISTS public.reviews
(
    review_id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    inv_id integer NOT NULL,
    account_id integer NOT NULL,
    review_rating integer NOT NULL CHECK (review_rating >= 1 AND review_rating <= 5),
    review_text text,
    review_date timestamp DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT reviews_pkey PRIMARY KEY (review_id)
);

-- 8. Create relationships for reviews table
ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT fk_reviews_inventory FOREIGN KEY (inv_id)
    REFERENCES public.inventory (inv_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT fk_reviews_account FOREIGN KEY (account_id)
    REFERENCES public.account (account_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

-- 9. Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_reviews_inv_id ON public.reviews (inv_id);
CREATE INDEX IF NOT EXISTS idx_reviews_account_id ON public.reviews (account_id);
CREATE INDEX IF NOT EXISTS idx_reviews_rating ON public.reviews (review_rating);

-- 10. Insert sample inventory data (from your inventory-data.txt file)
-- You'll need to add your actual inventory data here or import it separately

COMMIT;
